import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    citynames=['chicago','new york city','washington']
    monthnames=['all','January','February','March','April','May','June']
    day_of_week_names=['all','Monday','Tuesday','Wednesday','Thrusday','Friday','Saturday','Sunday']
    # TO DO: get user input for city (chicago, new york city, washington). TO get input from the user in a more interactive manner. Addition of try catch required in case of any error
    try:
        city=int(input('Please choose any value \n 1 - Chicago \n 2 - New York \n 3 - Washington \n '))
        while(city!=1 and city!=2 and city!=3):
            city=int(input('Please enter only 1,2 or 3. Please choose any value \n 1 - Chicago \n 2 - New York \n 3 - Washington \n '))
        else:
            cityname=(citynames[city-1])
    except:
        print('Enter only numbers')
    # TO DO: get user input for month (all, january, february, ... , june) To get the number input from the user for the related month. If the data is needed for all months then 1 to be entered by the user.
    
    try:
        month=int(input('Please choose any value \n 1 - All \n 2 - Jan \n 3 - Feb \n 4 - Mar \n 5 - Apr \n 6 - May \n 7 - Jun \n '))
        while(month!=1 and month!=2 and month!=3and month!=4and month!=5and month!=6and month!=7):
            month=int(input('Please enter only 1-7.Please choose any value \n 1 - All \n 2 - Jan \n 3 - Feb \n 4 - Mar \n 5 - Apr \n 6 - May \n 7 - Jun \n '))
        else:
            monthname=month-1
    except:
        print('Enter only numbers')
    
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday) To get the input based on the number and based on that loop to find the related value

    try:
        day_of_week=int(input('Please choose any value \n 1 - All \n 2 - Mon \n 3 - Tue \n 4 - Wed \n 5 - Thru \n 6 - Fri \n 7 - Sat \n 8 - Sun \n'))
        while(day_of_week!=1 and day_of_week!=2 and day_of_week!=3and day_of_week!=4and day_of_week!=5and day_of_week!=6and day_of_week!=7 and day_of_week!=8):
            day_of_week=int(input('Please enter only 1-8.Please choose any value \n 1 - All \n 2 - Mon \n 3 - Tue \n 4 - Wed \n 5 - Thru \n 6 - Fri \n 7 - Sat \n 8 - Sun \n'))
        else:
            day_of_week_name=(day_of_week_names[day_of_week-1])
    except:
        print('Enter only numbers')
    
    return cityname, monthname, day_of_week_name


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    
    df=pd.read_csv(CITY_DATA[city])
    df['Start Time']=pd.to_datetime(df['Start Time'])
    df['Month']=df['Start Time'].dt.month;
    df['Day']=df['Start Time'].dt.weekday_name
    
    if month!=0:
        df=df[df['Month']==month]
    if day!='all':
        df=df[df['Day']==day]
    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    print('Most Common Month',df['Month'].value_counts().idxmax())

    # TO DO: display the most common day of week
    print('Most Common Day of Week',df['Day'].value_counts().idxmax())

    # TO DO: display the most common start hour
    print('Most Common Start Hour',df['Start Time'].dt.hour.value_counts().idxmax())

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    print('Most used start station',df['Start Station'].value_counts().idxmax())

    # TO DO: display most commonly used end station
    print('Most used end station',df['End Station'].value_counts().idxmax())

    # TO DO: display most frequent combination of start station and end station trip
    commonstation=df[['Start Station','End Station']].mode().loc[0]
    print('Most frequent combination of start and end station {} , {}'.format(commonstation[0],commonstation[1]))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    print('Total Travel time',df['Trip Duration'].sum())

    # TO DO: display mean travel time
    print('Mean Travel time',df['Trip Duration'].mean())

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    countofusers=df['User Type'].value_counts()
    for index,utype in enumerate(countofusers):
          print('Count of user type {} {}'.format(countofusers.index[index],utype))


    # TO DO: Display counts of gender
    if 'Gender' in df.columns:
        print('Count Of gender')
        gendercount=df['Gender'].value_counts()
        for index,gtype in enumerate(gendercount):
            print("  {}: {}".format(gendercount.index[index], gtype))

    # TO DO: Display earliest, most recent, and most common year of birth
    if 'Birth Year' in df.columns:
        print('Most common birth',df['Birth Year'].value_counts().idxmax())
        print('Most recent birth',df['Birth Year'].max())
        print('Most Earliest birth',df['Birth Year'].min())

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def display_data(df, current_line):
   
    display = int(input('\nWould you like to view individual trip data?'
                    '\n 1.Yes \n2.No \n'))
    
    while(display!=1 and display!=2 ):
        display=int(input('Please enter only 1 or 2. Would you like to view individual trip data? \n 1 - Yes \n 2 - No \n '))
            
    else:
        
        if display == 2:
            return
        else:
            print(df.iloc[current_line:current_line+5])
            current_line += 5
            return display_data(df, current_line)
        
 
def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_data(df, 0)
        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
